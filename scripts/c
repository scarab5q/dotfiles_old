#!/usr/bin/env zsh

# #!/usr/bin/env bash

set -o errexit -o pipefail -o noclobber -o nounset
if [ $# -eq 0 ]; then
	F=$( fasd -flR | sk) || return 1
	$EDITOR $F
fi

# ! getopt --test > /dev/null 
# if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
#     echo 'I’m sorry, `getopt --test` failed in this environment.'
#     exit 1
# fi

OPTIONS=dfo:v
LONGOPTS=debug,force,output:,verbose

# -use ! and PIPESTATUS to get exit code with errexit set
# -temporarily store output to be able to check for errors
# -activate quoting/enhanced mode (e.g. by writing out “--options”)
# -pass arguments only via   -- "$@"   to separate them correctly
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    # e.g. return value is 1
    #  then getopt has complained about wrong arguments to stdout
    exit 2
fi
# read getopt’s output this way to handle the quoting right:
eval set -- "$PARSED"

# if [ -f $1 ]; then
# 	return $EDITOR $1
# fi

e=$EDITOR f=sk F=""
d=$(fasd -flR)
# now enjoy the options in order and nicely split until we see --
while true; do
    case "$1" in
	-a|--all)
		d="fd -t f"

        -f|--finder)
            f="$2"
            shift 2
            ;;
	-e|--editor)
	    e="$2"
	    shift 2
	    ;;
	-d|--directories)
	    d="$2" 
	    shift 2
	    ;;
	*)
		F="$1"
	shift
    esac
done

# handle non-option arguments
# if [[ $# -ne 1 ]]; then
#     echo "$0: A single input file is required."
#     exit 4
# fi
if [ ! -f "$F" ];
	F=$( $d | $f) || return 1
fi
$EDITOR $F

