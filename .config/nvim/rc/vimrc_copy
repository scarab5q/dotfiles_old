"nnoremap ; :
"nnoremap : ;
"nnoremap U <C-r>

"set title titlestring=
"set inccommand=split
"nnoremap <SPACE> <Nop>
"let mapleader = "\<Space>"
"map <leader>fes ;source ~/.vimrc<CR>;nohl<CR>
"map <leader>pi ;PlugInstall<CR>
"map <leader>pU ;UpdateRemotePlugins<CR>
"map <leader>pu ;PlugUpdate<CR>
"map <leader>pc ;PlugClean<CR>


"nmap <leader>fs ;w<CR>


"" hybrid line numbers
"set number              "show current line number
"set relativenumber          "show relative line numbers
"set hlsearch
"set incsearch
"set showmatch
"set ic
"set hidden
"set showmatch
"set ai

"" set guifont=Fira\ Code\ 12

"" function to yank and paste from the clipboard
"" function! ClipboardYank()
"" Call system('xclip -i -selection clipboard', @@)
"" endfunction
"" function! ClipboardPaste()
"" let @@ = system('xclip -o -selection clipboard')
"" endfunction
""
"" " remapping the y and d to clipboard yank
"" vnoremap <silent> y y:call ClipboardYank()<cr>
"" vnoremap <silent> d d:call ClipboardYank()<cr>
""
"" " remamping p to clipboard paste
"" nnoremap <silent> p :call ClipboardPaste()<cr>p

"" clears highlight on esc
"" nnormap <esc> :nohl<cr><esc>

"" sets tab settings

"set tabstop=4 softtabstop=0 expandtab shiftwidth=4 smarttab
"set wildmode=longest,list

"if &compatible
"    set nocompatible
"endif

"set runtimepath+=~/.cache/dein/repos/github.com/Shougo/dein.vim

"" Specify a directory for plugins
"" - For Neovim: ~/.local/share/nvim/plugged
"" - Avoid using standard Vim directory names like 'plugin'
"call plug#begin('~/.vim/plugged')

"" if dein#load_state('~/.cache/dein')
"" call dein#begin('~/.cache/dein')

"Plug '~/.cache/dein/repos/github.com/Shougo/dein.vim'
"Plug 'mhinz/vim-startify'
"Plug 'mzlogin/vim-markdown-toc'
"Plug 'initmd/init.md'

"Plug 'rust-lang/rust.vim'
"Plug 'tpope/vim-fugitive'
"" Plug 'junegunn/vim-peekaboo'
"Plug 'terryma/vim-multiple-cursors'
"Plug 'Chiel92/vim-autoformat'
"Plug 'rogual/neovim-dot-app'
"Plug 'lucc/nvimpager'
"Plug 'alvan/vim-closetag'
"Plug 'szymonmaszke/vimpyter'
"" Plug 'stevearc/vim-arduino'
"Plug 'Shougo/denite.nvim'
"Plug 'freitass/todo.txt-vim'
"Plug 'gioele/vim-autoswap'
"Plug 'osyo-manga/vim-anzu'
"Plug 'haya14busa/is.vim'
"Plug 'tommcdo/vim-exchange'
"Plug 'junegunn/vim-easy-align'
"Plug 'jceb/vim-orgmode'
"Plug 'jiangmiao/auto-pairs'

"Plug 'majutsushi/tagbar'
"Plug 'zhaocai/GoldenView.Vim'

"" Airline
"Plug 'vim-airline/vim-airline'
"Plug 'vim-airline/vim-airline-themes'

"Plug 'flw-cn/vim-nerdtree-l-open-h-close'

"" On-demand loading
"Plug 'scrooloose/nerdtree'
"Plug 'tpope/vim-commentary'
"Plug 'tpope/vim-surround'

"" Plugin outside ~/.vim/plugged with post-update hook
"""lug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
"Plug 'junegunn/fzf.vim'

"Plug 'Xuyuanp/nerdtree-git-plugin'

"" incremental seach
"Plug 'haya14busa/incsearch.vim'

"" calendar app
"Plug 'itchyny/calendar.vim'

""vim wiki
""call 'vimwiki/vimwiki', { 'branch': 'master' }

""g:vimwiki_list = [{'path':'~/google_drive/vimwiki'}]
"Plug 'majutsushi/tagbar'
"Plug 'farseer90718/vim-taskwarrior'
"Plug 'powerman/vim-plugin-AnsiEsc'
"Plug 'haya14busa/vim-asterisk'

"" Plugins will be downloaded under the specified directory.
"" Declare the list of plugins.
"Plug 'tpope/vim-sensible'
"Plug 'junegunn/seoul256.vim'

"Plug 'tpope/vim-commentary'

"Plug 'SirVer/ultisnips'

"" Plug 'autozimu/LanguageClient-neovim', {
""     \ 'branch': 'next',
""     \ 'do': 'bash install.sh',
""     \ }

"" (Optional) Multi-entry selection UI.
"" Plug 'junegunn/fzf'
"" Plug 'mdepsky/gocode', { 'rtp': 'nvim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }
"Plug 'neomake/neomake'

"Plug 'sheerun/vim-polyglot'
"Plug 'lervag/vimtex'


"Plug 'neoclide/coc.nvim', {'tag': '*', 'do': { -> coc#util#install()}}


"Plug 'Konfekt/FastFold'
"Plug 'matze/vim-tex-fold'


"if has('nvim')
"    Plug 'Shougo/defx.nvim'
"else
"    Plug 'Shougo/defx.nvim'
"    Plug 'roxma/nvim-yarp'
"    Plug 'roxma/vim-hug-neovim-rpc'
"endif

"" Plug 'roman/golden-ratio'
"Plug 'pbrisbin/vim-mkdir'
"Plug 'qpkorr/vim-bufkill'


"Plug 'ncm2/ncm2'
"Plug 'roxma/nvim-yarp'

"Plug 'rafi/awesome-vim-colorschemes'
"Plug 'easymotion/vim-easymotion'
"Plug 'flw-cn/vim-nerdtree-l-open-h-close'
"Plug 'tpope/vim-endwise'


"" List ends here. Plugins become visible to Vim after this call.
"call plug#end()
"" call dein#save_state()
"" endif

"set splitbelow
"tnoremap kj <C-\><C-n>
"command! -nargs=* T split | resize 20 | terminal <args>
"command! -nargs=* VT vsplit | resize 20 | terminal <args>

"nnoremap <leader>w; :split<cr>
"nnoremap <leader>w: :vsplit<cr>

"nnoremap <leader>! :T<CR>

"colo one-dark
"let g:airline_theme='one'
"let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#tabline#fnamemod = ':t'

"map <Leader>bt ;TagbarToggle<CR>
"autocmd FileType json syntax match Comment +\/\/.\+$+

"let g:netrw_liststyle = 3
"let g:netrw_browse_split = 4
"let g:netrw_altv = 1
"let g:netrw_winsize = 20
"let g:netrw_banner = 0

"augroup ProjectDrawer
"    autocmd!
"    autocmd VimEnter * :NERDTree
"augroup END

"let g:rustfmt_autosave = 1

"" let g:golden_ratio_exclude_nonmodifiable = 1
"" let g:golden_ratio_wrap_ignored = 1



""
"" ***FZF
""

"function! s:buflist()
"    redir => ls
"    silent ls
"    redir END
"    return split(ls, '\n')
"endfunction


"" FZF Buffers
"function! s:bufopen(e)
"    execute 'buffer' matchstr(a:e, '^[ 0-9]*')
"endfunction



"" FZF Tags
"function! s:tags_sink(line)
"    let parts = split(a:line, '\t\zs')
"    let excmd = matchstr(parts[2:], '^.*\ze;"\t')
"    execute 'silent e' parts[1][:-2]
"    let [magic, &magic] = [&magic, 0]
"    execute excmd
"    let &magic = magic
"endfunction

"function! s:tags()
"    if empty(tagfiles())
"        echohl WarningMsg
"        echom 'Preparing tags'
"        echohl None
"        call system('ctags -R')
"    endif

"    call fzf#run({
"                \ 'source':  'cat '.join(map(tagfiles(), 'fnamemodify(v:val, ":S")')).
"                \            '| grep -v -a ^!',
"                \ 'options': '+m -d "\t" --with-nth 1,4.. -n 1 --tiebreak=index',
"                \ 'down':    '40%',
"                \ 'sink':    function('s:tags_sink')})
"endfunction

"command! Tags call s:tags()


"let g:fzf_layout = { 'left': '~30%' }

"nnoremap <silent> <Leader>ff :Files<CR>

"" nnoremap <silent> <Leader>fb :call fzf#run({
""             \   'source':  reverse(<sid>buflist()),
""             \   'sink':    function('<sid>bufopen'),
""             \   'options': '+m',
""             \   'down':    len(<sid>buflist()) + 2 })<CR>

"let g:fzf_action = {
"            \'ctrl-t': 'tab split',
"            \'ctrl-x': 'split',
"            \'ctrl-v': 'vsplit' }

"let g:fzf_layout = { 'down': '~40%' }
"let g:fzf_colors =
"            \ { 'fg':      ['fg', 'Normal'],
"            \ 'bg':      ['bg', 'Normal'],
"            \ 'hl':      ['fg', 'Comment'],
"            \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
"            \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
"            \ 'hl+':     ['fg', 'Statement'],
"            \ 'info':    ['fg', 'PreProc'],
"            \ 'border':  ['fg', 'Ignore'],
"            \ 'prompt':  ['fg', 'Conditional'],
"            \ 'pointer': ['fg', 'Exception'],
"            \ 'marker':  ['fg', 'Keyword'],
"            \ 'spinner': ['fg', 'Label'],
"            \ 'header':  ['fg', 'Comment'] }

"function! s:buflist()
"    redir => ls
"    silent ls
"    redir END
"    return split(ls, '\n')
"endfunction

"function! s:bufopen(e)
"    execute 'buffer' matchstr(a:e, '^[ 0-9]*')
"endfunction
"function! s:Fasd(cmd)
"    let cmd = a:cmd
"    function! Sink(line) closure
"        execute(cmd . ' ' . split(a:line)[-1])
"    endfunction
"    return funcref('Sink')
"endfunction
"command! -bang -nargs=* FzfFasdFile
"            \ call fzf#run(fzf#wrap({'source': 'fasd -lf -R '. shellescape(<q-args>), 'sink': s:Fasd('e')}))
"command! -bang -nargs=* FzfFasdDir
"            \ call fzf#run(fzf#wrap({'source': 'fasd -ld -R '. shellescape(<q-args>), 'sink': s:Fasd('NERDTree')}))

"nnoremap <leader>fF :FzfFasdFile<CR>
"nnoremap <leader>cF :FzfFasdDir<CR>

"au BufWrite .* :Autoformat
"" ,f{char} to move to {char}
"map  ,f <Plug>(easymotion-bd-f)
"nmap ,f <Plug>(easymotion-overwin-f)

"" s{char}{char} to move to {char}{char}
"nmap s <Plug>(easymotion-overwin-f2)

"" Move to line
"map ,L <Plug>(easymotion-bd-jk)
"nmap ,L <Plug>(easymotion-overwin-line)

"" Move to word
"map  ,w <Plug>(easymotion-bd-w)
"nmap ,w <Plug>(easymotion-overwin-w)

"inoremap <expr> <TAB> pumvisible() ? "\<C-y>" : "\<TAB>"
"let g:coc_snippet_next = '<C-n>'
"let g:coc_snippet_prev = '<C-p>'

"" function SetLSPShortcuts()
""   nnoremap <leader>ld :call LanguageClient#textDocument_definition()<CR>
""   nnoremap <leader>lr :call LanguageClient#textDocument_rename()<CR>
""   nnoremap <leader>lf :call LanguageClient#textDocument_formatting()<CR>
""   nnoremap <leader>lt :call LanguageClient#textDocument_typeDefinition()<CR>
""   nnoremap <leader>lx :call LanguageClient#textDocument_references()<CR>
""   nnoremap <leader>la :call LanguageClient_workspace_applyEdit()<CR>
""   nnoremap <leader>lc :call LanguageClient#textDocument_completion()<CR>
""   nnoremap <leader>lh :call LanguageClient#textDocument_hover()<CR>
""   nnoremap <leader>ls :call LanguageClient_textDocument_documentSymbol()<CR>
""   nnoremap <leader>lm :call LanguageClient_contextMenu()<CR>
"" endfunction()

"" autocmd BufEnter  .*  call ncm2#enable_for_buffer()
"" augroup LSP
""   autocmd!
""   autocmd FileType rust, cpp, c, go call SetLSPShortcuts()
"" augroup END

"" inoremap <silent><expr> <TAB>
""       \ deoplete#mappings#manual_complete()
"" let g:deoplete#enable_at_startup = 1
"" let g:deoplete#enable_smart_case = 1 " Smart case
"" let g:deoplete#auto_complete_start_length = 1 " Stop bothering me
"" let g:deoplete#sources = {}
"" call deoplete#custom#option('sources', {
""     \'rust': ['LanguageClient'],
""     \'sh': ['LanguageClient'],
""     \})


"" let g:deoplete#enable_refresh_always = 0 " Stop the weird sorting redraw
"" let g:deoplete#max_abbr_width = 0 " Allow for wide menu
"" let g:deoplete#max_menu_width = 0 " Allow for tall menu

"" When writing a buffer (no delay).
"call neomake#configure#automake('w')

"let g:tex_flavor  = 'latex'
"let g:tex_conceal = ''
"let g:vimtex_fold_manual = 1
"let g:vimtex_latexmk_continuous = 1
"let g:vimtex_compiler_progname = 'nvr'
"" use SumatraPDF if you are on Windows
"let g:vimtex_view_method = 'zathura'


""opens file tree explorer
"map <leader>0 ;NERDTreeToggle<CR>
"autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
"" autocmd BufEnter NERD_tree_* nmap  d<CR> <CR> :NERDTreeToggle <CR>
"" autocmd BufLeave NERD_tree_* unmap d<CR>
"" autocmd BufLeave NERD_tree_* :NERDTreeToggle


"" centers the cursorj
"nnoremap j jzz
"nnoremap k kzz
"" Check if NERDTree is open or active
"" function! IsNERDTreeOpen()
""     return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
"" endfunction

"" Call NERDTreeFind iff NERDTree is active, current window contains a modifiable
"" file, and we're not in vimdiff
"" function! SyncTree()
""     if &modifiable && IsNERDTreeOpen() && strlen(expand('%')) > 0 && !&diff
""         NERDTreeFind
""         wincmd p
""     endif
"" endfunction

"" Highlight currently open buffer in NERDTree
"" autocmd BufEnter * call SyncTree()

"" function MoveLeftOrNerdTree()
"" if winnr() == winnr('$')
""     NERDTreeFind
"" else
""     exec <c-w>h
"" endif
"" endfunction
"" makes moving between windows more like spacemacs
"" nnoremap <silent> <leader>wh :call MoveLeftOrNerdTree()<cr>
"nnoremap <silent> <leader>wh <c-w>h
"nnoremap <silent> <leader>wl <c-w>l
"nnoremap <silent> <leader>wj <c-w>j
"nnoremap <silent> <leader>wk <c-w>k
"nnoremap <silent> <leader>wd :close<cr>
"nnoremap <silent> <leader>wx :BD<CR>:close<cr>



"" quits buffer
"nnoremap <silent> <leader>bd :BD<CR>
"nnoremap <silent> <Leader>bb :Buffers<CR>
"nnoremap <silent> <Leader>bh :BB<CR>
"nnoremap <silent> <Leader>bl :BF<CR>

"nnoremap <silent> <leader>qq :qall<CR>
"nnoremap <silent> <leader>qQ :qall!<CR>

"" go to .vimrc
"nnoremap <leader>fed :edit ~/.vimrc<CR>

"" go to

"" nnoremap <C-f> <C-b>
"" nnoremap <C-b> <C-f>

"filetype plugin indent on
"syntax enable

"autocmd VimEnter * UpdateRemotePlugins
"inoremap jk <Esc>


"function! FzyCommand(choice_command, vim_command)
"    try
"        let output = system(a:choice_command . " | fzy ")
"    catch /Vim:Interrupt/
"        " Swallow errors from ^C, allow redraw! below
"    endtry
"    redraw!
"    if v:shell_error == 0 && !empty(output)
"        exec a:vim_command . ' ' . output
"    endif
"endfunction


"map n <Plug>(is-nohl)<Plug>(anzu-n-with-echo)
"map N <Plug>(is-nohl)<Plug>(anzu-N-with-echo)

"map *  <Plug>(asterisk-z*)<Plug>(is-nohl-1)
"map g* <Plug>(asterisk-gz*)<Plug>(is-nohl-1)
"map #  <Plug>(asterisk-z#)<Plug>(is-nohl-1)
"map g# <Plug>(asterisk-gz#)<Plug>(is-nohl-1)

"map *   <Plug>(asterisk-*)
"map #   <Plug>(asterisk-#)
"map g*  <Plug>(asterisk-g*)
"map g#  <Plug>(asterisk-g#)
"map z*  <Plug>(asterisk-z*)
"map gz* <Plug>(asterisk-gz*)
"map z#  <Plug>(asterisk-z#)
"map gz# <Plug>(asterisk-gz#)

"func! WordProcessor()
"    " movement changes
"    map j gj
"    map k gk
"    " formatting text
"    setlocal formatoptions=1
"    setlocal noexpandtab
"    setlocal wrap
"    setlocal linebreak
"    " spelling and thesaurus
"    setlocal spell spelllang=en_gb
"    set thesaurus+=/home/test/.vim/thesaurus/mthesaur.txt
"    " complete+=s makes autocompletion search the thesaurus
"    set complete+=s
"endfu
"com! WP call WordProcessor()



"if exists('veonim')

"    " extensions for web dev
"    let g:vscode_extensions = [
"                \'rust-lang.rust',
"                \'ms-vscode.go',
"                \'vscode.markdown-language-features',
"                \'vscode.typescript-language-features',
"                \'vscode.css-language-features',
"                \'vscode.html-language-features',
"                \]

"    " multiple nvim instances
"    nno <silent> <c-t>c :Veonim vim-create<cr>
"    nno <silent> <c-g> :Veonim vim-switch<cr>
"    nno <silent> <c-t>, :Veonim vim-rename<cr>

"    " workspace functions
"    nno <silent> ,f :Veonim files<cr>
"    nno <silent> ,e :Veonim explorer<cr>
"    nno <silent> ,b :Veonim buffers<cr>
"    nno <silent> ,d :Veonim change-dir<cr>
"    "or with a starting dir: nno <silent> ,d :Veonim change-dir ~/proj<cr>

"    " searching text
"    nno <silent> <space>fw :Veonim grep-word<cr>
"    vno <silent> <space>fw :Veonim grep-selection<cr>
"    nno <silent> <space>fa :Veonim grep<cr>
"    nno <silent> <space>ff :Veonim grep-resume<cr>
"    nno <silent> <space>fb :Veonim buffer-search<cr>

"    " language features
"    nno <silent> sr :Veonim rename<cr>
"    nno <silent> sd :Veonim definition<cr>
"    nno <silent> si :Veonim implementation<cr>
"    nno <silent> st :Veonim type-definition<cr>
"    nno <silent> sf :Veonim references<cr>
"    nno <silent> sh :Veonim hover<cr>
"    nno <silent> sl :Veonim symbols<cr>
"    nno <silent> so :Veonim workspace-symbols<cr>
"    nno <silent> sq :Veonim code-action<cr>
"    nno <silent> sk :Veonim highlight<cr>
"    nno <silent> sK :Veonim highlight-clear<cr>
"    nno <silent> ,n :Veonim next-usage<cr>
"    nno <silent> ,p :Veonim prev-usage<cr>
"    nno <silent> sp :Veonim show-problem<cr>
"    nno <silent> <c-n> :Veonim next-problem<cr>
"    nno <silent> <c-p> :Veonim prev-problem<cr>

"endif
