NYC is pretty incredible. I'm originally from Atlanta, GA, which is in the Southeast part of the US, but moved up 
to New York a few years ago. Mostly just because I've always wanted to live here, and my wife and I sold our 
house in Atlanta for pretty good money so it seemed like maybe the time was right for an ambitious move like 
this. I would recommend anyone who enjoys cities to consider living in NYC. It has its challenges, and is pretty 
expensive, but I'm definitely in love with being here.


As far as how I ended up being an engineer here, I was originally working remotely for the company I worked for 
in Atlanta for about a year. After a while, I found that it was hard to feel really connected to living here 
without being out in it every dayâ€”riding the train, walking the crowded sidewalks, grabbing a beer with people 
after work, etc. Looked on Who's Hiring on Hacker News and found CALA. I've always worked on the technical side 
of creative industries, formerly a recording engineering, and then working at a company that worked with 
photographers, so working in fashion seemed like the right move. New York tech jobs are primarily banks, crypto 
startups, and other less creative fields, so it was awesome to come across this work.

The org-rs repo you found is a great find! Rewriting by porting the elisp version is decidedly not the approach 
that I wanted to take, but they are way ahead as far as how far they've gotten in the rewrite, so it might be 
worth lending a hand there. I might consider switching to helping that project over the finish line or to start 
building on top of it. I think it's still worth exploring a more idiomatic Rust implementation of a parser since 
I think it could be faster, smaller, and more general-purpose than just porting over the Emacs version of the 
parser.



I have an idea: I'll propose giving the org-rs github org to the author of that repo, and I can rename my 
existing repo to designate it as a more bleeding-edge experimental parser, but one that would strive for the same 
public API as the more complete one. We can use the fact that there is another parser to our advantage. We could 
set up property-based tests that ensure that given random well-formed org text, the same AST is generated by both 
parsers. We could also set up som benchmarks to track whether the idiomatic parser is faster or smaller or meet 
some other desirable metric.



Over time, if the more idiomatic parser proves to be faster, or certain parts of it prove to be faster, it could 
fold up into the more mainstream one. I'll broach the subject to the author and see what they have to say.



I'm open to a parser library other than nom, for sure. Nom seems to have a large community and generates really 
fast parsers, but if something like lalrpop or some other library proves to be useful, I'm open to trying it out!



Any interest in moving our conversation to email? I feel like Reddit isn't well suited for these longer form 
conversations. My email is scott@scotttrinh.com.
