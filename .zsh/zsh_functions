# ls () {
#     exa
# }
#
#
# f() {
#     sels=( "${(@f)$(fd "${fd_default[@]}" "${@:2}"| fzf)}" )
#     test -n "$sels" && print -z -- "$1 ${sels[@]:q:q}"
# }

# fm() f "$@" --max-depth 1

brightnessup() {
	if [ -z $1 ]
	then
		light -A 5
	else 
		light -A $1
	fi
}

brightnessdown() {
	if [ -z $1 ]
	then
		light -U 5
	else 
		light -U $1
	fi
}

volumeup() {
   pactl set-sink-volume 0 +2% # 1 is the device (could change)
}

volumedown() {
  pactl set-sink-volume 0 -2% # 1 is the device (could change)
}

volumemute() {
  pactl set-sink-mute 0 toggle
}

fe() {
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

ccd () {
  cd $(chezmoi source-path)
}

cef() {
  file=$(chezmoi managed -i files | sed "s/.*chezmoi//g" |fzf )
  if [ -n ${file+x} ]; then 
    chezmoi edit $file
    echo "do you want to chezmoi apply?\ntype y|Y|yes|Yes to apply\ntype n|N|no|No|nO|N|<Enter> to not apply"
    read response
    case $response in
      y|Y|yes|Yes)
        echo "applying..."
        chezmoi apply
        ;;
      [nN]|[nN][oO]|$'\n')
        echo "not applying"
        ;;
    esac 
  fi
}

e() {
  if [ $# -eq 0 ]; then
      F=$( fasd -lRf | fzf ) || exit 1
      if [ -f $F ];then
          $EDITOR $F
      fi
  fi
}

nixify() {
  if [ ! -e ./.envrc ]; then
    echo "use nix" > .envrc
    direnv allow
  fi
  if [ ! -e default.nix ]; then
    cat > default.nix <<'EOF'
with import <nixpkgs> {};
stdenv.mkDerivation {
  name = "env";
  buildInputs = [
    bashInteractive
  ];
}
EOF
    ${EDITOR:-vim} default.nix
  fi
}

ftpane() {
  local panes current_window current_pane target target_window target_pane
  panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
  current_pane=$(tmux display-message -p '#I:#P')
  current_window=$(tmux display-message -p '#I')

  target=$(echo "$panes" | grep -v "$current_pane" | fzf +m --reverse) || return

  target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
  target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

  if [[ $current_window -eq $target_window ]]; then
    tmux select-pane -t ${target_window}.${target_pane}
  else
    tmux select-pane -t ${target_window}.${target_pane} &&
    tmux select-window -t $target_window
  fi
}

cinto () {
    cat <'EOF' >>$1
}

fkill() {
    local pid 
    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
    else
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
    fi  

    if [ "x$pid" != "x" ]
    then
        echo $pid | xargs kill -${1:-9}
    fi  
}


# function to use path extractor. A tool that extracts paths from stdout
pe () {
    path-extractor
}

# a function to list all directories and have them filterable and searchable
lff () {
    ls -a1 | fzf
}

# a function to change directories using fzf
cz () {
    d=$(fasd -dlR | fzf)
    printf "%s %s\n" "cd" "$d" >> ~/.zhistory
    cd $d
}

cf () {
    cd $( fd -t d | fzf )
}

# a function to change directories using fzf
cF () {
    cd $( fd . -t d ~ | fzf )
}

# a function to change directories using fzf
cfa () {
    cd $( fd -t d --hidden | fzf )
}

# a function to change to any directory searched from the home directory
cFA () {
    cd $( fd . -t d --hidden ~ | fzf )
}

fr () {
    $1 $( sk --ansi -i -c "rg --color=always -i --line-number --hidden '{} .'" --preview "preview.sh {}"  )
}

# fg () {
#     $1 $(exa -a1r | sk --ansi)
# }

# ll () {
#     exa -l | awk '{print $NF}'
# }

gclone () {
    if [ $# -eq 0 ]; then
        git clone
    fi

}


ea () {
    if [ $# -eq 0 ]; then
        file= $( fd -t f --hidden | sk) || return 1
        $EDITOR $file
    elif [ $1 = '-f' ]; then
        file= $( fd -t f --hidden | fzy) || return 1
        $EDITOR $file
    fi
}



ef () {
    $EDITOR $(fd --type f --hidden | sk)
}

ez () {
    emacsclient -c $1 &
}

et () {
    emacsclient -t $1
}

eb () {
    emacsbare $1
}

zcfg () {
    # echo ".zshrc"
    $EDITOR .zshrc
}

cstatus () {
    config status | fpp
}

gstatus () {
    git status | fpp
}

cpull () {
    config pull | fpp
}

gpull () {
    git pull | fpp
}

cpush () {
    branch=$(config status | grep -oP  "(?<=branch\s)\w+")
    config push --set-upstream origin $branch
}

gpsh () {
    branch=$(git status | grep -oP  "(?<=branch\s)\w+")
    echo "branch is $branch"
    git push --set-upstream origin $branch
}

mcd () {
    mkdir -p $1
    cd $1
}

getPrint () {
    ag -r "print\(\w+\)" $1
}

gpush () {
    branch=$(git status | grep -oP "branch (\w+)")

    if [ ! $(git log | grep -oP "$branch" ) ]
    then
        git push
    else
        git push --set-upstream origin $branch
    fi
}

lsag () {
    ls -al | grep "$1"
}

cfgC () {
    config add /home/jack/scripts/
    config commit -am "$1"
    config push
}

function insert-fzy-path-in-command-line() {
    local selected_path
    echo # Run fzy underneath the current prompt
    selected_path=$(fd --hidden | fzy) || return
    LBUFFER="$LBUFFER${(q)selected_path} " # ${(q)VAR} shell-escapes the string
    zle reset-prompt
}

zle -N insert-fzy-path-in-command-line

unsetopt flowcontrol # By default, ^S freezes terminal output, only needed if keybinding is ^S
    bindkey "^S" "insert-fzy-path-in-command-line"

    isin () {
        cat $2 | grep -P "$1"
    }

fisin () {
    cat $2 | grep -Pzo "(?s)$1 \(\) \{(.*?)\}"
}

defalias () {
    echo "alias $1=\'$2\'" >> ~/.zsh/.zsh_aliases
}

fsarein () {
    cat $1 | grep -Pzo "[(?s)\w\d_-]+ \(\) (\{(?:\{??[^\{]*?\}))" | sed 's/\}\n/\}\n\n\n/g'
}

